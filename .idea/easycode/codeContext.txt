<relevant_code>



<file file_path=/payment/src/main/java/com/nttdata/payment/application/usecases/PaymentService.java>
package com.nttdata.payment.application.usecases;

import com.nttdata.payment.domain.dto.PaymentDTO;
import com.nttdata.payment.domain.dto.request.PaymentRequest;

import java.util.List;

public interface PaymentService {
    PaymentDTO createPayment(PaymentRequest payment);

    List<PaymentDTO> getPaymentsByUserId(Long userId);
}

</file>



<file file_path=/payment/src/main/java/com/nttdata/payment/infrastructure/PaymentSpringJpaAdapter.java>

import com.nttdata.payment.infrastructure.adapter.mapper.PaymentDboMapper;
import com.nttdata.payment.infrastructure.adapter.repository.PaymentRepository;
import jakarta.transaction.Transactional;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@Transactional
public class PaymentSpringJpaAdapter implements PaymentPersistencePort {
    private final PaymentRepository paymentRepository;
    private final PaymentDboMapper paymentDboMapper;

    public PaymentSpringJpaAdapter(PaymentRepository paymentRepository, PaymentDboMapper paymentDboMapper) {
        this.paymentRepository = paymentRepository;
        this.paymentDboMapper = paymentDboMapper;
    }

    @Override
    public Payment create(Payment payment) {
        var paymentToSave = paymentDboMapper.paymentToEntity(payment);
        var paymentSaved = paymentRepository.save(paymentToSave);

        return paymentDboMapper.entityToPayment(paymentSaved);
    }

    @Override
    public List<Payment> findByUserId(Long userId) {
        List<Payment> payments= paymentRepository.findByUserId(userId).stream().map(paymentDboMapper::entityToPayment).toList();
        if (payments.isEmpty()){
            throw new PaymentException(HttpStatus.NOT_FOUND, PaymentConstants.USER_NOT_FOUND);
        }
        return payments;
    }

}

</file>



<file file_path=/payment/pom.xml>

			<version>2.1.0</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>1.6.0</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>1.6.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.ai</groupId>
				<artifactId>spring-ai-bom</artifactId>
				<version>${spring-ai.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

</project>

</file>



<file file_path=/payment/src/main/java/com/nttdata/payment/infrastructure/rest/controller/PaymentController.java>
package com.nttdata.payment.infrastructure.rest.controller;

import com.nttdata.payment.application.usecases.PaymentService;
import com.nttdata.payment.domain.dto.PaymentDTO;
import com.nttdata.payment.domain.dto.request.PaymentRequest;
import com.nttdata.payment.domain.model.Payment;
import com.nttdata.payment.application.service.PaymentServiceImpl;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/payments")
public class PaymentController {

    private final PaymentService paymentService;

    public PaymentController(PaymentService paymentService) {
        this.paymentService = paymentService;
    }

    @PostMapping
    public PaymentDTO createPayment(@RequestBody PaymentRequest payment) {
        return paymentService.createPayment(payment);
    }

    @GetMapping("/user/{userId}")
    public List<PaymentDTO> getPaymentsByUserId(@PathVariable Long userId) {
        return paymentService.getPaymentsByUserId(userId);
    }
}
</file>



<file file_path=/payment/src/test/java/com/nttdata/payment/PaymentEntityApplicationTests.java>
package com.nttdata.payment;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class PaymentEntityApplicationTests {

	@Test
	void contextLoads() {
	}

}

</file>



<file file_path=/payment/src/main/java/com/nttdata/payment/application/service/PaymentServiceImpl.java>
package com.nttdata.payment.application.service;

import com.nttdata.payment.application.mapper.PaymentDtoMapper;
import com.nttdata.payment.application.mapper.PaymentRequestMapper;
import com.nttdata.payment.application.usecases.PaymentService;
import com.nttdata.payment.domain.dto.PaymentDTO;
import com.nttdata.payment.domain.dto.request.PaymentRequest;
import com.nttdata.payment.domain.port.PaymentPersistencePort;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PaymentServiceImpl implements PaymentService {

    private final PaymentPersistencePort paymentPersistencePort;
    private final PaymentRequestMapper paymentRequestMapper;
    private final PaymentDtoMapper paymentDtoMapper;

    @Autowired
    public PaymentServiceImpl(PaymentPersistencePort paymentPersistencePort, PaymentRequestMapper paymentRequestMapper, PaymentDtoMapper paymentDtoMapper) {
        this.paymentPersistencePort = paymentPersistencePort;
        this.paymentRequestMapper = paymentRequestMapper;
        this.paymentDtoMapper = paymentDtoMapper;
    }

    @Override
    public PaymentDTO createPayment(PaymentRequest paymentRequest) {
        var paymentToCreate = paymentRequestMapper.requestToDomain(paymentRequest);
        var paymentCreated = paymentPersistencePort.create(paymentToCreate);
        return paymentDtoMapper.paymentToPaymentDto(paymentCreated);
    }

    @Override
    public List<PaymentDTO> getPaymentsByUserId(Long userId) {
        return paymentPersistencePort.findByUserId(userId).stream().map(paymentDtoMapper::paymentToPaymentDto).toList();
    }
}
</file>



</relevant_code>
